CREATE TABLE surveys (
    survey_id SERIAL PRIMARY KEY,
    survey_name VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE questions (
    question_id SERIAL PRIMARY KEY,
    survey_id INT NOT NULL,
    question_text VARCHAR(255) NOT NULL,
    FOREIGN KEY (survey_id) REFERENCES surveys(survey_id)
);


CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    user_name VARCHAR(255) NOT NULL,
    user_email VARCHAR(255) UNIQUE NOT NULL
);


CREATE TABLE responses (
    response_id SERIAL PRIMARY KEY,
    user_id INT NOT NULL,
    question_id INT NOT NULL,
    response_text TEXT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (question_id) REFERENCES questions(question_id)
);


INSERT INTO surveys (survey_name, created_at) VALUES
('Customer Satisfaction Survey', DEFAULT),
('Employee Engagement Survey', DEFAULT),
('Product Feedback Survey', DEFAULT);


INSERT INTO questions (survey_id, question_text) VALUES
(1, 'How satisfied are you with our service?'),
(1, 'Would you recommend our service to others?'),
(2, 'How do you rate the work environment?'),
(2, 'Do you feel valued by your team?'),
(3, 'How would you rate the quality of our product?');


INSERT INTO users (user_name, user_email) VALUES
('John Doe', 'john.doe@example.com'),
('Jane Smith', 'jane.smith@example.com'),
('Alice Johnson', 'alice.johnson@example.com'),
('Joey Dallas', 'joey.dallas@example.com'),
('Janis Scott', 'janis.scott@example.com'),
('Abigail Swotch', 'abigail.swotch@example.com'),
('Abril Johanson', 'abril.johanson@example.com');

INSERT INTO responses (user_id, question_id, response_text) VALUES
(1, 1, 'Very satisfied'),
(1, 2, 'Yes'),
(1, 3, 'Excellent'),
(1, 4, 'Yes'),
(1, 5, 'Good'),
(2, 1, 'Satisfied'),
(2, 2, 'No'),
(2, 3, 'Average'),
(2, 4, 'No'),
(2, 5, 'Fair'),
(3, 1, 'Neutral'),
(3, 2, 'Yes'),
(3, 3, 'Poor'),
(3, 4, 'Yes'),
(3, 5, 'Excellent'),
(4, 1, 'Very dissatisfied'),
(4, 2, 'No'),
(4, 3, 'Very poor'),
(4, 4, 'No'),
(4, 5, 'Poor'),
(5, 1, 'Satisfied'),
(5, 2, 'Yes'),
(5, 3, 'Good'),
(5, 4, 'Yes'),
(5, 5, 'Average'),
(6, 1, 'Very satisfied'),
(6, 2, 'Yes'),
(6, 3, 'Excellent'),
(6, 4, 'No'),
(6, 5, 'Good'),
(7, 1, 'Neutral'),
(7, 2, 'Yes'),
(7, 3, 'Average'),
(7, 4, 'Yes'),
(7, 5, 'Fair');

-- buscar por nombre de encuesta con frecuencia.
CREATE INDEX idx_survey_name ON surveys(survey_name);

-- buscar preguntas por encuesta.
CREATE INDEX idx_questions_survey_id ON questions(survey_id);

-- buscar frecuentemente por el texto de la pregunta.
CREATE INDEX idx_question_text ON questions(question_text);

-- buscar frecuentemente por nombre de usuario.
CREATE INDEX idx_user_name ON users(user_name);

-- buscar frecuentemente por correo electrónico de usuario.
CREATE UNIQUE INDEX idx_user_email ON users(user_email);

-- consultas que filtran respuestas por usuario.
CREATE INDEX idx_responses_user_id ON responses(user_id);

-- consultas que filtran respuestas por pregunta.
CREATE INDEX idx_responses_question_id ON responses(question_id);

-- consultas que filtran por combinación de usuario y pregunta.
CREATE INDEX idx_responses_user_question ON responses(user_id, question_id);



--Write a query to retrieve all responses for a given survey, including survey name, question text, and response text.
SELECT
    s.survey_name,
    q.question_text,
    r.response_text
FROM
    surveys s
JOIN
    questions q ON s.survey_id = q.survey_id
JOIN
    responses r ON q.question_id = r.question_id
WHERE
    s.survey_id = 1;


--Write a query to calculate the average score for each survey, grouped by survey name.
SELECT
    s.survey_name,
    AVG(
        CASE
            WHEN r.response_text = 'Very satisfied' THEN 5
            WHEN r.response_text = 'Satisfied' THEN 4
            WHEN r.response_text = 'Neutral' THEN 3
            WHEN r.response_text = 'Dissatisfied' THEN 2
            WHEN r.response_text = 'Very dissatisfied' THEN 1
            ELSE NULL
        END
    ) AS average_score
FROM
    surveys s
JOIN
    questions q ON s.survey_id = q.survey_id
JOIN
    responses r ON q.question_id = r.question_id
GROUP BY
    s.survey_name;



--Write a query to find the top 3 users with the highest average response score across all surveys.
WITH UserScores AS (
    SELECT
        r.user_id,
        AVG(
            CASE
                WHEN r.response_text = 'Very satisfied' THEN 5
                WHEN r.response_text = 'Satisfied' THEN 4
                WHEN r.response_text = 'Neutral' THEN 3
                WHEN r.response_text = 'Dissatisfied' THEN 2
                WHEN r.response_text = 'Very dissatisfied' THEN 1
                ELSE NULL
            END
        ) AS average_score
    FROM
        responses r
    GROUP BY
        r.user_id
)
SELECT
    u.user_id,
    u.user_name,
    us.average_score
FROM
    UserScores us
JOIN
    users u ON us.user_id = u.user_id
ORDER BY
    us.average_score DESC
LIMIT 3;


--Write a query to determine the distribution of responses for each question in a specific survey (e.g., count of each response).
SELECT
    q.question_text,
    r.response_text,
    COUNT(*) AS response_count
FROM
    surveys s
JOIN
    questions q ON s.survey_id = q.survey_id
JOIN
    responses r ON q.question_id = r.question_id
WHERE
    s.survey_id = 1
GROUP BY
    q.question_text,
    r.response_text
ORDER BY
    q.question_text,
    r.response_text;



-- Write a stored procedure that calculates the score for a survey based on responses.
-- Use a simple scoring algorithm where each answer has a weight, and the score is the sum of weights.

CREATE OR REPLACE PROCEDURE CalculateSurveyScore(IN survey_id_value INT, OUT total_score NUMERIC)
LANGUAGE plpgsql
AS $$
BEGIN
    SELECT COALESCE(SUM(
        CASE
            WHEN r.response_text = 'Very satisfied' THEN 5
            WHEN r.response_text = 'Satisfied' THEN 4
            WHEN r.response_text = 'Neutral' THEN 3
            WHEN r.response_text = 'Dissatisfied' THEN 2
            WHEN r.response_text = 'Very dissatisfied' THEN 1
            ELSE 0
        END
    ), 0) INTO total_score
    FROM responses r
    JOIN questions q ON r.question_id = q.question_id
    WHERE q.survey_id = survey_id_value;
END;
$$;


DO $$
DECLARE
    result NUMERIC;
BEGIN
    CALL CalculateSurveyScore(1, result);
    RAISE NOTICE 'Total score for survey 1: %', result;
END $$;




--  Create a view that displays the survey name, question text, response text, and calculated score for each response.
CREATE OR REPLACE VIEW SurveyResponseDetails AS
SELECT
    s.survey_name,
    q.question_text,
    r.response_text,
    CASE
        WHEN r.response_text = 'Very satisfied' THEN 5
        WHEN r.response_text = 'Satisfied' THEN 4
        WHEN r.response_text = 'Neutral' THEN 3
        WHEN r.response_text = 'Dissatisfied' THEN 2
        WHEN r.response_text = 'Very dissatisfied' THEN 1
        ELSE 0
    END AS calculated_score
FROM
    surveys s
JOIN
    questions q ON s.survey_id = q.survey_id
JOIN
    responses r ON q.question_id = r.question_id;


